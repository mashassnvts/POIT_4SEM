USE UNIVER;

GO
DROP PROCEDURE IF EXISTS PSUBJECT;
GO


GO
CREATE PROCEDURE PSUBJECT
AS 
BEGIN
DECLARE @count INT = (SELECT COUNT(*) FROM SUBJECT)
SELECT SUBJECT AS 'йнд', SUBJECT_NAME AS дхяжхокхмю, PULPIT AS йютедпю FROM SUBJECT
RETURN @count
END;


GO 
DECLARE @result INT = 0;
EXEC @result = PSUBJECT;
PRINT 'RESULT = ' +  CAST(@result AS VARCHAR(3))




--------------------------------------
CREATE TABLE #SUBJECT (
[SUBJECT] NVARCHAR(20) PRIMARY KEY,
[SUBJECT_NAME] NVARCHAR(MAX),
[PULPIT] NVARCHAR(MAX)
)
--DROP TABLE #SUBJECT

GO
ALTER PROCEDURE PSUBJECT @p NVARCHAR(20)
AS
BEGIN
SELECT * FROM SUBJECT
WHERE SUBJECT.PULPIT = @P
END
GO

INSERT #SUBJECT EXEC PSUBJECT @p = 'ну'

SELECT * FROM #SUBJECT


--------------------------------------------------
DROP PROCEDURE IF EXISTS PAUDITORIUM_INSERT;
GO

CREATE PROCEDURE PAUDITORIUM_INSERT @a NVARCHAR(20), @n NVARCHAR(50), @c INT = 0, @t NVARCHAR(10)
AS
BEGIN TRY
INSERT INTO AUDITORIUM VALUES(@a, @n, @c, @t);
RETURN 1;
END TRY
BEGIN CATCH
PRINT ERROR_MESSAGE();
PRINT ERROR_STATE();
PRINT ERROR_PROCEDURE();
RETURN -1;
END CATCH
GO


DECLARE @result INT;
EXEC @result = PAUDITORIUM_INSERT @a ='100-3', @n ='кй', @c =41, @t ='109-3'
PRINT @result
SELECT * FROM AUDITORIUM


---------------------------
DROP PROCEDURE IF EXISTS SUBJECT_REPORT
GO
CREATE PROCEDURE SUBJECT_REPORT @p NVARCHAR(10)
AS
DECLARE @rc INT = 0
BEGIN TRY
DECLARE @subjectt NVARCHAR(20), @resultt NVARCHAR(300) = '';
DECLARE SUBJECTS CURSOR FOR SELECT SUBJECT.SUBJECT FROM SUBJECT WHERE SUBJECT.PULPIT = RTRIM(@p)
IF NOT EXISTS (SELECT SUBJECT.SUBJECT FROM SUBJECT WHERE SUBJECT.PULPIT = rtrim(@p))
RAISERROR('ERROR', 11,1)
ELSE 
OPEN SUBJECTS	
FETCH SUBJECTS INTO @subjectt
PRINT 'SUBJECTS '
WHILE @@FETCH_STATUS = 0
BEGIN
SET @resultt = RTRIM (@subjectt) + ', ' + RTRIM(@resultt)
SET @rc = @rc + 1
FETCH SUBJECTS INTO @subjectt
END
PRINT @resultt
CLOSE SUBJECTS
DEALLOCATE SUBJECTS
RETURN @rc
END TRY
BEGIN CATCH
PRINT 'ERROR IN PARAM';
IF ERROR_PROCEDURE() IS NOT NULL
PRINT 'NAME OF PROCEDURE ' + ERROR_PROCEDURE()
RETURN @rc
END CATCH
GO

DECLARE @re INT;
EXEC @re = SUBJECT_REPORT 'ну'
PRINT 'COUNT OF SUBJECT=' + CAST(@re AS VARCHAR(3)) 



-----------------------------------------------
DROP PROCEDURE IF EXISTS PAUDITORIUM_INSERTX 
GO
CREATE PROCEDURE PAUDITORIUM_INSERTX @a NVARCHAR(20), @n NVARCHAR(50), @c INT = 0, @t NVARCHAR(10), @tn NVARCHAR(50)
AS
BEGIN
DECLARE @rc INT = 1;
BEGIN TRY
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRAN
INSERT INTO AUDITORIUM_TYPE(AUDITORIUM_TYPE, AUDITORIUM_TYPENAME) VALUES(@t, @tn)
EXEC @rc = PAUDITORIUM_INSERT @a, @n, @c, @t;
COMMIT TRAN;
RETURN @rc;
END TRY
BEGIN CATCH	
PRINT 'ERROR NUMBER: ' + CAST(ERROR_NUMBER() AS VARCHAR(6));
PRINT 'ERROR MESSAGE: ' + ERROR_MESSAGE();
PRINT 'ERROR SEVERITY: ' + CAST(ERROR_SEVERITY() AS VARCHAR(6));
PRINT 'ERROR STATE: ' + CAST(ERROR_STATE() AS VARCHAR(8));
PRINT 'ERROR LINE: ' + CAST(ERROR_LINE() AS VARCHAR(8));
IF ERROR_PROCEDURE() IS NOT NULL
PRINT 'NAME OF PROCEDURE: ' + ERROR_PROCEDURE();
IF @@TRANCOUNT > 0 ROLLBACK TRAN;
RETURN -1;
END CATCH;

DECLARE @result INT;
EXEC @result = PAUDITORIUM_INSERTX @a='324-1', @n='кй-й', @c=50,@tn='йНЛО. ЙКЮЯЯ', @t='пЫнярн';
SELECT * FROM AUDITORIUM
SELECT * FROM AUDITORIUM_TYPE;


